#!/bin/bash

# Navigate to project root
cd "$(git rev-parse --show-toplevel)"

# Function to display usage information
usage() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  --skip-pyinstaller    Skip the PyInstaller Python build step"
    echo "  --skip-npm-build      Skip the npm build step"
    echo "  --skip-git-tag        Skip the Git tag creation and push step"
    echo "  --force               Force rebuild for PyInstaller even if executables exist"
    echo "  --help                Display this help message"
    exit 1
}

# Parse command line arguments
SKIP_PYINSTALLER=false
SKIP_NPM_BUILD=false
SKIP_GIT_TAG=false
FORCE_BUILD=false

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --skip-pyinstaller) SKIP_PYINSTALLER=true ;;
        --skip-npm-build) SKIP_NPM_BUILD=true ;;
        --skip-git-tag) SKIP_GIT_TAG=true ;;
        --force) FORCE_BUILD=true ;;
        --help) usage ;;
        *) echo "Unknown parameter passed: $1"; usage ;;
    esac
    shift
done

# Activate virtual environment if it exists
if [ -e venv/bin/activate ]; then
    echo "Activating venv..."
    source venv/bin/activate
fi

# Run Python build with optional force flag unless skipped
if [ "$SKIP_PYINSTALLER" = false ]; then
    echo "Running Python build..."
    if [ "$FORCE_BUILD" = true ]; then
        bin/_build.py --force
    else
        bin/_build.py
    fi
    # Check if Python build was successful
    if [ $? -ne 0 ]; then
        echo "Python build failed. Exiting."
        exit 1
    fi
else
    echo "Skipping PyInstaller build step as requested."
fi

# Run npm build if package.json exists unless skipped
if [ "$SKIP_NPM_BUILD" = false ]; then
    if [ -f package.json ]; then
        echo "Running npm build..."
        npm run build
        if [ $? -ne 0 ]; then
            echo "npm build failed. Exiting."
            exit 1
        fi
    else
        echo "No package.json found, skipping npm build."
    fi
else
    echo "Skipping npm build step as requested."
fi

# Handle Git tags for current branch unless skipped
if [ "$SKIP_GIT_TAG" = false ]; then
    # Extract version from orakle/__init__.py
	PROJECT_ROOT="$(git rev-parse --show-toplevel)"
    VERSION=$(cd $PROJECT_ROOT && python -c "import ainara; print(ainara.__version__)")
    # Dynamically get the current Git branch
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    TAG="${BRANCH}-v${VERSION}"
    echo "Updating Git tag: ${TAG}"
    git tag -d "${TAG}" 2>/dev/null || true
    git tag "${TAG}"
    git push origin ":${TAG}" 2>/dev/null || true
    git push origin "${TAG}"
else
    echo "Skipping Git tag creation and push step as requested."
fi

echo "Full build and deployment process completed successfully!"
